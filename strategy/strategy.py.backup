import copy
import numpy as np


PAIR_VALUE = [0, 0, 1, 10, 50]
CARD = [str(i % 9 + 1) + str(['m', 'p', 's', 'z'][i // 9]) for i in range(34)]
CARD_VALUE = {x: int(x[1] != 'z') * (5 - abs(int(x[0]) - 5)) for x in CARD}


def sort_hand(hand: list):
    return copy.deepcopy(sorted(hand, key=lambda x: ord(x[1]) * 10 + int(x[0])))


def _calc_set_num(hand: list, log=False):
    """
    Calculate how many sets are there in the hand
    :param log: log or not
    :param hand: list (length=13/14) of tiles (str like '1p', '2z')
    :return: (int, 1/0) = (set_num, whether a pair in rest tiles)
    """
    hand = sort_hand(hand)
    if log:
        print('calc set. hand =')
        print(hand)
    set_num = 0
    i = 0
    while i + 2 < len(hand):
        if hand[i][1] == hand[i+1][1] == hand[i+2][1] and \
                int(hand[i][0]) == int(hand[i+1][0]) == int(hand[i+2][0]):
            set_num += 1
            hand.pop(i)
            hand.pop(i)
            hand.pop(i)
        else:
            i += 1
    i = 0
    while i + 2 < len(hand):
        d, c = hand[i]
        if c == 'z':
            i += 1
            continue
        nd1 = str(int(d) + 1) + c
        nd2 = str(int(d) + 2) + c
        if hand.count(nd1) and hand.count(nd2):
            set_num += 1
            hand.pop(i)
            hand.remove(nd1)
            hand.remove(nd2)
        else:
            i += 1
    i = 0
    pair = 0
    while i + 1 < len(hand):
        if hand[i][1] == hand[i+1][1] and hand[i][0] == hand[i+1][0]:
            pair = 1
        i += 1
    if log:
        print(set_num, pair)
    return set_num, pair


def _calc_income_num(hand: list, log=False):
    """
    Calculate how many tiles form a new set
    :param log: log or not
    :param hand: list (length=13) of tiles (str like '1p', '2z')
    :return: int
    """
    hand = sort_hand(hand)
    if log:
        print(hand)
    logger = ''
    set_num, _ = _calc_set_num(hand, log)
    income_num = 0
    for tile in CARD:
        n_hand = copy.deepcopy(hand)
        n_hand.append(tile)
        n_set_num, _ = _calc_set_num(n_hand, log)
        if n_set_num > set_num:
            point = max(4 - n_hand.count(tile), 0)
            income_num += point
            if log and point:
                logger += tile + '=' + str(point) + ', '
    if log:
        print(logger)
    return income_num


def _tenpai(hand: list):
    """
    Tenpai or not
    :param hand: hand
    :return: bool
    """
    for tile in CARD:
        n_hand = copy.deepcopy(hand)
        n_hand.append(tile)
        set_num, pair = _calc_set_num(n_hand)
        if set_num == 4 and pair:
            return True
    return False


def step(hand: list, log=False):
    """
    Discard a tile which maximizes the number of tiles which can form a new set
    :param log: log or not
    :param hand: list (length=14) of tiles (str like '1p', '2z')
    :return: tile: str or None, bool: (str like '1p', '2z') indicating which to discard, click or not
    """
    if '4z' in hand:
        return None, True  # tile 'pei'
    hand = sort_hand(hand)
    if log:
        print('step, test_hand:')
        print(hand)
    # discard
    best_tile = None
    max_score = -1
    for tile in np.unique(hand):
        hand_13 = copy.deepcopy(hand)
        for i in range(14):
            if hand_13[i] == tile:
                hand_13.pop(i)
                break
        if log:
            print('\nremove ' + tile)
        set_num, pair = _calc_set_num(hand_13, log)
        income_num = _calc_income_num(hand_13, log)
        score = (set_num * 100 + pair * PAIR_VALUE[set_num] + income_num) * 10 - CARD_VALUE[tile]
        if log:
            print('set = %d, p = %d, inc = %d' % (set_num, pair, income_num))
        if score > max_score:
            max_score = score
            best_tile = tile
    if log:
        print('\nbest_tile = ' + best_tile + '\n')
    hand.remove(best_tile)
    return best_tile, _tenpai(hand)


if __name__ == '__main__':
    import random
    for i in range(10):
        hand = []
        for j in range(14):
            hand.append(CARD[random.randint(0, 26)])
        print(sort_hand(hand))
        print(step(hand))

